<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-04-17T12:53:13-04:00</updated><id>http://localhost:4000/</id><title type="html">Project Teething Problems</title><subtitle>The greatest are yet to be discovered. 
</subtitle><entry><title type="html">Progress Update</title><link href="http://localhost:4000/2017/04/10/progress-update.html" rel="alternate" type="text/html" title="Progress Update" /><published>2017-04-10T00:00:00-04:00</published><updated>2017-04-10T00:00:00-04:00</updated><id>http://localhost:4000/2017/04/10/progress-update</id><content type="html" xml:base="http://localhost:4000/2017/04/10/progress-update.html">&lt;h2 id=&quot;description-of-the-code&quot;&gt;Description of the code&lt;/h2&gt;
&lt;p&gt;I wrote a program to find violated comb inequalities, given x* (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;pr76.x&lt;/code&gt;) and the set of dominoes with surplus &amp;lt; 1 (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;pr76.dom&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Call the support graph of x* &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;. The methodology is first constructing a graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; where the nodes represent dominoes, and &lt;code class=&quot;highlighter-rouge&quot;&gt;(u,v)&lt;/code&gt; is an edge in &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; if and only if the dominoes represented by u and v intersect.  Then we run a finding stable sets heuristic on &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; to find an odd stable set. The stable set represents a set of disjoint dominoes in the support  graph &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To compute a handle for the odd set of disjoint dominoes, we need to decide upon which half of each domino should be inside the handle. This is done by an exhaustive enumeration on all possible ways of assigning halves of dominoes to handles if the number of dominoes is small, and randomly examine possible patterns if the number of dominoes is large.    After knowing which halves are inside the handle and which halves are not, we construct a supergraph of the support graph &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;, called &lt;code class=&quot;highlighter-rouge&quot;&gt;Fbar&lt;/code&gt;, by adding a node &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and a node &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;F&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; are adjacent to  nodes in the dominoes that are supposed to be inside and outside the handle, respectively. Moreover, the weights of the new edges incident to &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; are significantly big numbers, say 100.  Compute the min cost s-t cut in &lt;code class=&quot;highlighter-rouge&quot;&gt;Fbar&lt;/code&gt;. The cut is very unlikely to use any edge incident to &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; or to &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;. (From experiments, the cut weights are usually below 10). Hence, the cut separates the inside-handle halves of the dominoes from the outside-handle halves.&lt;/p&gt;

&lt;p&gt;The min cost s-t cut is the handle such that the comb surplus is the smallest give the assignment of which parts should be inside the handle. If the total surplus of the comb using the min cost s-t cut as the handle is &amp;lt; 1, then we find a violated comb!&lt;/p&gt;

&lt;h2 id=&quot;results-on-the-implementation&quot;&gt;Results on the implementation:&lt;/h2&gt;
&lt;p&gt;Given x* (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;pr76.x&lt;/code&gt;) and the set of dominoes (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;pr76.dom&lt;/code&gt;), the program first generates k odd sets of disjoint dominoes. (k = 10, 100, 1000, etc). 
Then for each odd set of disjoint dominoes, it computes the best handle for possible arrangements of halves inside and outside the handle.&lt;/p&gt;

&lt;p&gt;We hope that if there exists violated comb inequalities, we will eventually find one by sampling enough combs (i.e. make k large, and sample all possible arrangements).&lt;/p&gt;

&lt;p&gt;We break the interval [0,8] to smaller intervals. The program computes possible handles for k odd sets of dominoes, and outputs the number of occurrences of comb surpluses in each interval.&lt;/p&gt;

&lt;h3 id=&quot;pr76&quot;&gt;pr76:&lt;/h3&gt;
&lt;p&gt;Initially, the program only records the number of comb inequalities with surplus &amp;lt; 0.9. As the number of distinct dominoes converge when k becomes large, we tried this on k = 100000 for &lt;code class=&quot;highlighter-rouge&quot;&gt;pr76&lt;/code&gt;, and claim this to be almost exhaustive. We only considered odd sets with &amp;gt;=5 number of teeth. Unfortunately, it did not find any violated comb. Once we allow the number of teeth to be 3, and record the number of comb inequalities with surplus &amp;lt; 1.0, the program found around 1/10 k violated combs. However, those violations may be caused by rounding errors, since they are around 10^-4 away from 1.&lt;/p&gt;

&lt;p&gt;For example, in tsp/stableset/April 6/3teeth_test_find_handle_pr76&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Number of odd sets of teeth considered: 1000
Violated combs found: 95
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;att532&quot;&gt;att532:&lt;/h3&gt;
&lt;p&gt;For large examples like &lt;code class=&quot;highlighter-rouge&quot;&gt;att532&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fl1577&lt;/code&gt;, the number of 
Despite that no violated comb has been found, there are plenty combs with surpluses only a bit larger than 1.&lt;/p&gt;

&lt;h3 id=&quot;fl1577&quot;&gt;fl1577:&lt;/h3&gt;

&lt;p&gt;### Problems on small graphs (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;pr76&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;### Problems on large graphs (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;att532&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;## Running time and performance, details of implementation:&lt;/p&gt;

&lt;p&gt;progress update&lt;/p&gt;</content><author><name></name></author><summary type="html">Description of the code I wrote a program to find violated comb inequalities, given x* (e.g. pr76.x) and the set of dominoes with surplus &amp;lt; 1 (e.g. pr76.dom).</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2017/04/03/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-04-03T16:09:50-04:00</published><updated>2017-04-03T16:09:50-04:00</updated><id>http://localhost:4000/jekyll/update/2017/04/03/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/04/03/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>